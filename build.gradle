import java.nio.charset.StandardCharsets

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id("com.modrinth.minotaur") version "2.1.2"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url 'https://api.modrinth.com/maven' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation("maven.modrinth:lazydfu:0.1.2")
    modImplementation include("eu.pb4:polymer:0.2.0-rc.4.3+1.18.2")
    modImplementation include("fr.catcore:server-translations-api:1.4.12+1.18.2")
}

loom {
    accessWidenerPath.set("src/main/resources/act.accesswidener" as File)
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

modrinth {
    token.set(env("MODRINTH_TOKEN"))
    projectId.set(modrinth_id)
    versionType.set(env("RELEASE_OVERRIDE") ?: "alpha" in mod_version ? "alpha" : !bool("BUILD_RELEASE") || '-' in mod_version ? "beta" : "release")
    def changelogContents = env("CHANGELOG")
    if (changelogContents != null) {
        changelog.set(changelogContents)
    } else {
        def ref = env("GITHUB_REF")
        if (ref != null && ref.startsWith("refs/tags/")) {
            changelog.set "You may view the changelog at ${env("GITHUB_SERVER_URL")}/${env("GITHUB_REPOSITORY")}/releases/tag/${URLEncoder.encode(ref.substring(10), StandardCharsets.UTF_8)}"
        } else {
            changelog.set "No changelog is available. Perhaps poke at ${env("GITHUB_SERVER_URL")}/${env("GITHUB_REPOSITORY")} for a changelog?"
        }
    }
    uploadFile.set(remapJar)
    gameVersions.set([minecraft_version])
    loaders.addAll("fabric", "quilt")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
    }
}

static String env(String env) {
    return System.getenv(env)
}

static boolean bool(String env) {
    return Boolean.parseBoolean(System.getenv(env))
}
